{
  "data": {
    "blocks": [
      {
        "@type": "@builder.io/sdk:Element",
        "@version": 2,
        "id": "kostopro-enhanced-app",
        "component": {
          "name": "Custom Code",
          "options": {
            "code": "<!-- KostoPro Enhanced Application -->\n<div id=\"kostopro-enhanced-root\" class=\"kostopro-app\">\n  <!-- Dynamic Library Loader Status -->\n  <div id=\"library-loader\" class=\"loading-overlay\">\n    <div class=\"loader-content\">\n      <div class=\"spinner\"></div>\n      <p>Loading libraries...</p>\n    </div>\n  </div>\n\n  <!-- Main Application -->\n  <div id=\"main-app\" style=\"display: none;\">\n    <!-- Header with Theme Toggle -->\n    <header class=\"app-header\">\n      <div class=\"container\">\n        <div class=\"header-content\">\n          <div class=\"logo-section\">\n            <div class=\"logo-icon\">\n              <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z\"/>\n                <path d=\"M18 12v.5\"/>\n                <path d=\"M16 17.93a9.77 9.77 0 0 1 0-11.86\"/>\n                <path d=\"M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33\"/>\n              </svg>\n            </div>\n            <div class=\"logo-text\">\n              <h1>KostoPro Enhanced</h1>\n              <p>Professional Seafood Costing Suite</p>\n            </div>\n          </div>\n          <div class=\"header-actions\">\n            <button id=\"theme-toggle\" class=\"theme-btn\" title=\"Toggle Dark Mode\">\n              <svg class=\"theme-icon sun\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"12\" cy=\"12\" r=\"5\"/>\n                <path d=\"m12 1-1 1m0 20 1 1m11-9h-1M1 12h1m16.24-7.76-.71.71M6.47 17.53l-.71.71m12.48 0-.71-.71M6.47 6.47l-.71-.71\"/>\n              </svg>\n              <svg class=\"theme-icon moon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"m12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z\"/>\n              </svg>\n            </button>\n            <button id=\"start-tour\" class=\"btn btn-primary\">Start Tour</button>\n          </div>\n        </div>\n      </div>\n    </header>\n\n    <!-- Quick Actions Toolbar -->\n    <div id=\"quick-actions\" class=\"quick-actions\">\n      <div class=\"container\">\n        <div class=\"actions-grid\">\n          <button class=\"action-btn\" data-action=\"new-cost\">\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M12 5v14m-7-7h14\"/>\n            </svg>\n            New Cost\n          </button>\n          <button class=\"action-btn\" data-action=\"export\">\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4m4-5 5 5 5-5m-5 5V3\"/>\n            </svg>\n            Export\n          </button>\n          <button class=\"action-btn\" data-action=\"share\">\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8M16 6l-4-4-4 4m4-4v12\"/>\n            </svg>\n            Share\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Main Content Area -->\n    <main class=\"main-content\">\n      <div class=\"container\">\n        <!-- Date Range Filters -->\n        <div id=\"date-filters\" class=\"date-filters card\">\n          <h3>Date Range</h3>\n          <div class=\"filter-grid\">\n            <div class=\"input-group\">\n              <label for=\"start-date\">Start Date</label>\n              <input type=\"text\" id=\"start-date\" class=\"date-picker\" placeholder=\"Select start date\">\n            </div>\n            <div class=\"input-group\">\n              <label for=\"end-date\">End Date</label>\n              <input type=\"text\" id=\"end-date\" class=\"date-picker\" placeholder=\"Select end date\">\n            </div>\n            <div class=\"quick-filters\">\n              <button class=\"quick-filter\" data-range=\"7\">7 Days</button>\n              <button class=\"quick-filter\" data-range=\"30\">30 Days</button>\n              <button class=\"quick-filter\" data-range=\"90\">90 Days</button>\n            </div>\n          </div>\n        </div>\n\n        <!-- KPI Cards -->\n        <div id=\"kpi-grid\" class=\"kpi-grid\">\n          <div class=\"kpi-card\">\n            <div class=\"kpi-icon\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"/>\n              </svg>\n            </div>\n            <div class=\"kpi-content\">\n              <h4>Total Revenue</h4>\n              <div class=\"counter\" data-target=\"125340\">0</div>\n              <span class=\"kpi-currency\">€</span>\n            </div>\n          </div>\n          <div class=\"kpi-card\">\n            <div class=\"kpi-icon\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2m8-10a4 4 0 1 1 0-8 4 4 0 0 1 0 8Z\"/>\n              </svg>\n            </div>\n            <div class=\"kpi-content\">\n              <h4>Active Products</h4>\n              <div class=\"counter\" data-target=\"47\">0</div>\n            </div>\n          </div>\n          <div class=\"kpi-card\">\n            <div class=\"kpi-icon\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M3 3v5h5M6 17l4-4 4 4 6-6\"/>\n              </svg>\n            </div>\n            <div class=\"kpi-content\">\n              <h4>Profit Margin</h4>\n              <div class=\"counter\" data-target=\"23.5\">0</div>\n              <span class=\"kpi-unit\">%</span>\n            </div>\n          </div>\n          <div class=\"kpi-card\">\n            <div class=\"kpi-icon\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                <polyline points=\"12,6 12,12 16,14\"/>\n              </svg>\n            </div>\n            <div class=\"kpi-content\">\n              <h4>Processing Time</h4>\n              <div class=\"counter\" data-target=\"2.3\">0</div>\n              <span class=\"kpi-unit\">min</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- Costs Section -->\n        <div id=\"costs-section\" class=\"section card\">\n          <div class=\"section-header\">\n            <h2>Cost Management</h2>\n            <div class=\"cost-summary\">\n              <span>Total: <span id=\"total-cost\" class=\"cost-value\">€0.00</span></span>\n              <span>Per Unit: <span id=\"cost-per-unit\" class=\"cost-value\">€0.00</span></span>\n            </div>\n          </div>\n          \n          <div class=\"costs-container\">\n            <!-- Direct Costs -->\n            <div class=\"cost-panel\">\n              <div class=\"collapsible-header\" data-target=\"direct-costs\">\n                <h3>Άμεσα Κόστη</h3>\n                <svg class=\"chevron\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <polyline points=\"6,9 12,15 18,9\"/>\n                </svg>\n              </div>\n              <div class=\"collapsible-content\" id=\"direct-costs\">\n                <div class=\"input-grid\">\n                  <div class=\"input-group\">\n                    <label for=\"raw-material\">Raw Material</label>\n                    <input type=\"number\" id=\"raw-material\" class=\"cost-input\" value=\"0\" min=\"0\" step=\"0.01\" data-threshold=\"1000\">\n                    <span class=\"currency\">€</span>\n                  </div>\n                  <div class=\"input-group\">\n                    <label for=\"labor\">Labor</label>\n                    <input type=\"number\" id=\"labor\" class=\"cost-input\" value=\"0\" min=\"0\" step=\"0.01\" data-threshold=\"500\">\n                    <span class=\"currency\">€</span>\n                  </div>\n                  <div class=\"input-group\">\n                    <label for=\"packaging\">Packaging</label>\n                    <input type=\"number\" id=\"packaging\" class=\"cost-input\" value=\"0\" min=\"0\" step=\"0.01\" data-threshold=\"200\">\n                    <span class=\"currency\">€</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Indirect Costs -->\n            <div class=\"cost-panel\">\n              <div class=\"collapsible-header\" data-target=\"indirect-costs\">\n                <h3>Έμμεσα Κόστη</h3>\n                <svg class=\"chevron\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <polyline points=\"6,9 12,15 18,9\"/>\n                </svg>\n              </div>\n              <div class=\"collapsible-content\" id=\"indirect-costs\">\n                <div class=\"input-grid\">\n                  <div class=\"input-group\">\n                    <label for=\"utilities\">Utilities</label>\n                    <input type=\"number\" id=\"utilities\" class=\"cost-input\" value=\"0\" min=\"0\" step=\"0.01\" data-threshold=\"300\">\n                    <span class=\"currency\">€</span>\n                  </div>\n                  <div class=\"input-group\">\n                    <label for=\"overhead\">Overhead</label>\n                    <input type=\"number\" id=\"overhead\" class=\"cost-input\" value=\"0\" min=\"0\" step=\"0.01\" data-threshold=\"400\">\n                    <span class=\"currency\">€</span>\n                  </div>\n                  <div class=\"input-group\">\n                    <label for=\"insurance\">Insurance</label>\n                    <input type=\"number\" id=\"insurance\" class=\"cost-input\" value=\"0\" min=\"0\" step=\"0.01\" data-threshold=\"150\">\n                    <span class=\"currency\">€</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Transport Section -->\n        <div id=\"transport-section\" class=\"section card\">\n          <div class=\"section-header\">\n            <h2>Transport Management</h2>\n            <div class=\"transport-actions\">\n              <button id=\"add-transport-leg\" class=\"btn btn-secondary\">Add Leg</button>\n              <div id=\"transport-summary\" class=\"transport-summary\">\n                Total Transport: <span class=\"cost-value\">€0.00</span>\n              </div>\n            </div>\n          </div>\n          \n          <div id=\"transport-legs\" class=\"transport-legs\">\n            <!-- Transport legs will be added dynamically -->\n          </div>\n          \n          <!-- Transport Leg Template -->\n          <template id=\"transport-leg-template\">\n            <div class=\"transport-leg\">\n              <div class=\"leg-header\">\n                <h4>Transport Leg <span class=\"leg-number\">1</span></h4>\n                <button class=\"remove-leg\" title=\"Remove this leg\">\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M18 6 6 18M6 6l12 12\"/>\n                  </svg>\n                </button>\n              </div>\n              <div class=\"input-grid\">\n                <div class=\"input-group\">\n                  <label>From</label>\n                  <input type=\"text\" class=\"transport-input\" name=\"from\" placeholder=\"Origin\">\n                </div>\n                <div class=\"input-group\">\n                  <label>To</label>\n                  <input type=\"text\" class=\"transport-input\" name=\"to\" placeholder=\"Destination\">\n                </div>\n                <div class=\"input-group\">\n                  <label>Distance (km)</label>\n                  <input type=\"number\" class=\"transport-input\" name=\"distance\" value=\"0\" min=\"0\" step=\"0.1\">\n                </div>\n                <div class=\"input-group\">\n                  <label>Cost per km</label>\n                  <input type=\"number\" class=\"transport-input\" name=\"cost-per-km\" value=\"0\" min=\"0\" step=\"0.01\">\n                  <span class=\"currency\">€</span>\n                </div>\n                <div class=\"input-group\">\n                  <label>Fixed Cost</label>\n                  <input type=\"number\" class=\"transport-input\" name=\"fixed-cost\" value=\"0\" min=\"0\" step=\"0.01\">\n                  <span class=\"currency\">€</span>\n                </div>\n                <div class=\"leg-total\">\n                  <strong>Leg Total: <span class=\"leg-cost\">€0.00</span></strong>\n                </div>\n              </div>\n            </div>\n          </template>\n        </div>\n\n        <!-- Advanced Features Toggle -->\n        <div class=\"section card\">\n          <button id=\"adv-toggle\" class=\"advanced-toggle\">\n            <span>Προχωρημένες Δυνατότητες</span>\n            <svg class=\"chevron\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <polyline points=\"6,9 12,15 18,9\"/>\n            </svg>\n          </button>\n          \n          <div id=\"adv-content\" class=\"advanced-content\" style=\"display: none;\">\n            <!-- Advanced Pills Navigation -->\n            <div class=\"pills-nav\">\n              <button class=\"adv-pill active\" data-target=\"processing-settings\">Ρυθμίσεις Επεξεργασίας</button>\n              <button class=\"adv-pill\" data-target=\"export-settings\">Ρυθμίσεις Εξαγωγής</button>\n            </div>\n            \n            <!-- Processing Settings -->\n            <div class=\"adv-content-section\" id=\"processing-settings\">\n              <h3>Processing Settings</h3>\n              <div class=\"input-grid\">\n                <div class=\"input-group\">\n                  <label for=\"batch-size\">Batch Size</label>\n                  <input type=\"number\" id=\"batch-size\" value=\"100\" min=\"1\">\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"quality-grade\">Quality Grade</label>\n                  <select id=\"quality-grade\">\n                    <option value=\"premium\">Premium</option>\n                    <option value=\"standard\">Standard</option>\n                    <option value=\"economy\">Economy</option>\n                  </select>\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"processing-method\">Processing Method</label>\n                  <select id=\"processing-method\">\n                    <option value=\"fresh\">Fresh</option>\n                    <option value=\"frozen\">Frozen</option>\n                    <option value=\"smoked\">Smoked</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n            <!-- Export Settings -->\n            <div class=\"adv-content-section\" id=\"export-settings\" style=\"display: none;\">\n              <h3>Export Settings</h3>\n              <div class=\"input-grid\">\n                <div class=\"input-group\">\n                  <label for=\"export-format\">Export Format</label>\n                  <select id=\"export-format\">\n                    <option value=\"pdf\">PDF Report</option>\n                    <option value=\"excel\">Excel Workbook</option>\n                    <option value=\"csv\">CSV Data</option>\n                  </select>\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"include-charts\">Include Charts</label>\n                  <input type=\"checkbox\" id=\"include-charts\" checked>\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"company-logo\">Company Logo</label>\n                  <input type=\"file\" id=\"company-logo\" accept=\"image/*\">\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Dashboard Charts -->\n        <div class=\"charts-grid\">\n          <div class=\"chart-container card\">\n            <h3>Cost vs Profit Analysis</h3>\n            <canvas id=\"chart-cost-vs-profit\" class=\"builder-chart\"></canvas>\n          </div>\n          <div class=\"chart-container card\">\n            <h3>Price Trend</h3>\n            <canvas id=\"chart-price-trend\" class=\"builder-chart\"></canvas>\n          </div>\n          <div class=\"chart-container card\">\n            <h3>Direct vs Indirect Costs</h3>\n            <canvas id=\"chart-direct-indirect\" class=\"builder-chart\"></canvas>\n          </div>\n        </div>\n\n        <!-- Scenario Analysis Section -->\n        <div id=\"scenario-section\" class=\"section card\">\n          <div class=\"section-header\">\n            <h2>Scenario Analysis</h2>\n            <div class=\"scenario-controls\">\n              <select id=\"scenario-select\">\n                <option value=\"\">Select Scenario</option>\n              </select>\n              <button id=\"scenario-new\" class=\"btn btn-secondary\">New Scenario</button>\n              <button id=\"scenario-save\" class=\"btn btn-primary\">Save</button>\n              <button id=\"scenario-delete\" class=\"btn btn-danger\">Delete</button>\n            </div>\n          </div>\n          \n          <div class=\"scenario-content\">\n            <!-- Parameter Controls -->\n            <div class=\"parameter-controls\">\n              <h3>Parameters</h3>\n              <div class=\"param-grid\">\n                <div class=\"param-item\">\n                  <label for=\"material-cost-slider\">Material Cost Variation</label>\n                  <input type=\"range\" id=\"material-cost-slider\" class=\"param-slider\" min=\"-50\" max=\"50\" value=\"0\" data-param=\"material\">\n                  <span class=\"param-value\">0%</span>\n                </div>\n                <div class=\"param-item\">\n                  <label for=\"labor-cost-slider\">Labor Cost Variation</label>\n                  <input type=\"range\" id=\"labor-cost-slider\" class=\"param-slider\" min=\"-50\" max=\"50\" value=\"0\" data-param=\"labor\">\n                  <span class=\"param-value\">0%</span>\n                </div>\n                <div class=\"param-item\">\n                  <label for=\"transport-cost-slider\">Transport Cost Variation</label>\n                  <input type=\"range\" id=\"transport-cost-slider\" class=\"param-slider\" min=\"-50\" max=\"50\" value=\"0\" data-param=\"transport\">\n                  <span class=\"param-value\">0%</span>\n                </div>\n              </div>\n            </div>\n            \n            <!-- Scenario Comparison -->\n            <div class=\"scenario-comparison\">\n              <div class=\"comparison-header\">\n                <h3>Scenario Comparison</h3>\n                <button id=\"comparison-toggle\" class=\"btn btn-secondary\">Toggle Overlay</button>\n              </div>\n              <div class=\"comparison-panels\">\n                <div class=\"comparison-panel\">\n                  <h4>Scenario A</h4>\n                  <div id=\"scenario-a\" class=\"scenario-summary\">\n                    <canvas class=\"scenario-chart\"></canvas>\n                    <div class=\"scenario-metrics\">\n                      <div class=\"metric\">\n                        <span class=\"label\">Total Cost:</span>\n                        <span class=\"value\">€0.00</span>\n                      </div>\n                      <div class=\"metric\">\n                        <span class=\"label\">Profit Margin:</span>\n                        <span class=\"value\">0%</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"comparison-panel\">\n                  <h4>Scenario B</h4>\n                  <div id=\"scenario-b\" class=\"scenario-summary\">\n                    <canvas class=\"scenario-chart\"></canvas>\n                    <div class=\"scenario-metrics\">\n                      <div class=\"metric\">\n                        <span class=\"label\">Total Cost:</span>\n                        <span class=\"value\">€0.00</span>\n                      </div>\n                      <div class=\"metric\">\n                        <span class=\"label\">Profit Margin:</span>\n                        <span class=\"value\">0%</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <!-- Tornado Chart -->\n            <div class=\"tornado-container\">\n              <h3>Sensitivity Analysis</h3>\n              <canvas id=\"tornado-chart\"></canvas>\n            </div>\n            \n            <!-- Scenario Actions -->\n            <div class=\"scenario-actions\">\n              <button id=\"export-scenario\" class=\"btn btn-primary\">Export Scenario</button>\n              <button id=\"share-scenario\" class=\"btn btn-secondary\">Share Scenario</button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Revenue Forecast Section -->\n        <div id=\"forecast-section\" class=\"section card\">\n          <div class=\"section-header\">\n            <h2>Revenue Forecast</h2>\n            <div class=\"forecast-controls\">\n              <div class=\"input-group\">\n                <label for=\"forecast-start-date\">Start Date</label>\n                <input type=\"text\" id=\"forecast-start-date\" class=\"date-picker\">\n              </div>\n              <div class=\"input-group\">\n                <label for=\"forecast-end-date\">End Date</label>\n                <input type=\"text\" id=\"forecast-end-date\" class=\"date-picker\">\n              </div>\n              <div class=\"input-group\">\n                <label for=\"horizon-input\">Horizon (months)</label>\n                <input type=\"number\" id=\"horizon-input\" value=\"12\" min=\"1\" max=\"60\">\n              </div>\n              <div class=\"input-group\">\n                <label for=\"growth-rate-input\">Growth Rate (%)</label>\n                <input type=\"range\" id=\"growth-rate-input\" min=\"-10\" max=\"20\" value=\"5\" step=\"0.1\">\n                <span class=\"range-value\">5%</span>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Forecast Summary -->\n          <div id=\"forecast-summary\" class=\"kpi-grid\">\n            <div class=\"kpi-card\">\n              <h4>Projected Revenue</h4>\n              <div class=\"counter\" data-target=\"0\">0</div>\n              <span class=\"kpi-currency\">€</span>\n            </div>\n            <div class=\"kpi-card\">\n              <h4>Growth Rate</h4>\n              <div class=\"counter\" data-target=\"0\">0</div>\n              <span class=\"kpi-unit\">%</span>\n            </div>\n            <div class=\"kpi-card\">\n              <h4>Confidence Level</h4>\n              <div class=\"counter\" data-target=\"0\">0</div>\n              <span class=\"kpi-unit\">%</span>\n            </div>\n          </div>\n          \n          <!-- Forecast Chart -->\n          <div class=\"chart-container\">\n            <canvas id=\"forecast-chart\" class=\"builder-chart\"></canvas>\n          </div>\n          \n          <!-- Forecast Table -->\n          <div class=\"table-container\">\n            <table id=\"forecast-table\" class=\"data-table\">\n              <thead>\n                <tr>\n                  <th>Month</th>\n                  <th>Revenue</th>\n                  <th>Growth</th>\n                  <th>Cumulative</th>\n                </tr>\n              </thead>\n              <tbody>\n                <!-- Forecast data will be populated here -->\n              </tbody>\n            </table>\n          </div>\n          \n          <!-- Forecast Actions -->\n          <div class=\"forecast-actions\">\n            <button id=\"export-forecast\" class=\"btn btn-primary\">Export Chart</button>\n            <button id=\"csv-download-forecast\" class=\"btn btn-secondary\">Download CSV</button>\n            <button id=\"ai-forecast-btn\" class=\"btn btn-accent\">AI Forecast</button>\n          </div>\n        </div>\n\n        <!-- Financial Models Section -->\n        <div id=\"financial-models-section\" class=\"section card\">\n          <div class=\"section-header\">\n            <h2>Financial Models</h2>\n          </div>\n          \n          <!-- Investment Parameters -->\n          <div class=\"investment-params\">\n            <div class=\"input-grid\">\n              <div class=\"input-group\">\n                <label for=\"initial-investment-input\">Initial Investment</label>\n                <input type=\"number\" id=\"initial-investment-input\" value=\"50000\" min=\"0\" step=\"100\">\n                <span class=\"currency\">€</span>\n              </div>\n              <div class=\"input-group\">\n                <label for=\"discount-rate-input\">Discount Rate (%)</label>\n                <input type=\"number\" id=\"discount-rate-input\" value=\"10\" min=\"0\" max=\"30\" step=\"0.1\">\n              </div>\n            </div>\n          </div>\n          \n          <!-- Cash Flow Table -->\n          <div class=\"cashflow-container\">\n            <h3>Cash Flow Analysis</h3>\n            <div class=\"table-controls\">\n              <button id=\"add-cashflow-row\" class=\"btn btn-secondary\">Add Year</button>\n            </div>\n            <table id=\"cashflows-table\" class=\"data-table\">\n              <thead>\n                <tr>\n                  <th>Year</th>\n                  <th>Cash Inflow</th>\n                  <th>Cash Outflow</th>\n                  <th>Net Cash Flow</th>\n                  <th>Present Value</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>0</td>\n                  <td><input type=\"number\" value=\"0\" class=\"cash-inflow\"></td>\n                  <td><input type=\"number\" value=\"50000\" class=\"cash-outflow\"></td>\n                  <td class=\"net-flow\">-€50,000</td>\n                  <td class=\"present-value\">-€50,000</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td><input type=\"number\" value=\"15000\" class=\"cash-inflow\"></td>\n                  <td><input type=\"number\" value=\"5000\" class=\"cash-outflow\"></td>\n                  <td class=\"net-flow\">€10,000</td>\n                  <td class=\"present-value\">€9,091</td>\n                  <td><button class=\"remove-row btn-danger\">Remove</button></td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          \n          <!-- Financial Calculations -->\n          <div class=\"financial-calculations\">\n            <div class=\"calc-buttons\">\n              <button id=\"calculate-npv\" class=\"btn btn-primary\">Calculate NPV</button>\n              <button id=\"calculate-irr\" class=\"btn btn-primary\">Calculate IRR</button>\n              <button id=\"run-montecarlo\" class=\"btn btn-accent\">Monte Carlo</button>\n            </div>\n            \n            <div class=\"calc-results\">\n              <div class=\"result-card\">\n                <h4>Net Present Value</h4>\n                <div id=\"npv-value\" class=\"counter big\" data-target=\"0\">€0</div>\n              </div>\n              <div class=\"result-card\">\n                <h4>Internal Rate of Return</h4>\n                <div id=\"irr-value\" class=\"counter big\" data-target=\"0\">0%</div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Financial Charts -->\n          <div class=\"financial-charts\">\n            <div class=\"chart-container\">\n              <h3>NPV Analysis</h3>\n              <canvas id=\"npv-chart\" class=\"builder-chart\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n              <h3>Monte Carlo Simulation</h3>\n              <canvas id=\"montecarlo-chart\" class=\"builder-chart\"></canvas>\n            </div>\n            <div class=\"chart-container\">\n              <h3>Sensitivity Analysis</h3>\n              <canvas id=\"tornado-financial\" class=\"builder-chart\"></canvas>\n            </div>\n          </div>\n          \n          <!-- Export Controls -->\n          <div class=\"export-controls\">\n            <button id=\"export-financial\" class=\"btn btn-primary\">Export Charts</button>\n            <button id=\"csv-download-financial\" class=\"btn btn-secondary\">Download Data</button>\n            <button id=\"export-dashboard\" class=\"btn btn-accent\">Full Dashboard</button>\n          </div>\n        </div>\n\n        <!-- Recent Activity -->\n        <div class=\"section card\">\n          <h2>Recent Activity</h2>\n          <div id=\"recent-batches-table\" class=\"table-container\">\n            <table class=\"data-table sortable\">\n              <thead>\n                <tr>\n                  <th data-sort=\"date\">Date</th>\n                  <th data-sort=\"product\">Product</th>\n                  <th data-sort=\"cost\">Cost</th>\n                  <th data-sort=\"profit\">Profit</th>\n                  <th data-sort=\"status\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>2024-01-15</td>\n                  <td>Salmon Fillet</td>\n                  <td>€125.50</td>\n                  <td>€45.20</td>\n                  <td><span class=\"status-badge success\">Completed</span></td>\n                </tr>\n                <tr>\n                  <td>2024-01-14</td>\n                  <td>Tuna Steaks</td>\n                  <td>€98.30</td>\n                  <td>€32.10</td>\n                  <td><span class=\"status-badge processing\">Processing</span></td>\n                </tr>\n                <tr>\n                  <td>2024-01-13</td>\n                  <td>Cod Fillets</td>\n                  <td>€76.80</td>\n                  <td>€28.50</td>\n                  <td><span class=\"status-badge success\">Completed</span></td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <!-- Alerts Panel -->\n        <div id=\"alerts-panel\" class=\"section card\">\n          <h2>Alerts & Notifications</h2>\n          <div class=\"alerts-list\">\n            <div class=\"alert alert-warning\">\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/>\n                <path d=\"M12 9v4M12 17h.01\"/>\n              </svg>\n              <div class=\"alert-content\">\n                <h4>Cost Threshold Exceeded</h4>\n                <p>Raw material costs have exceeded the defined threshold by 15%</p>\n                <small>2 minutes ago</small>\n              </div>\n            </div>\n            <div class=\"alert alert-info\">\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                <path d=\"m9 12 2 2 4-4\"/>\n              </svg>\n              <div class=\"alert-content\">\n                <h4>Export Complete</h4>\n                <p>Financial report has been successfully exported to PDF</p>\n                <small>5 minutes ago</small>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Comments Feed -->\n        <div id=\"comments-feed\" class=\"section card\">\n          <h2>Team Comments</h2>\n          <div class=\"comment-form\">\n            <textarea id=\"new-comment\" placeholder=\"Add a comment...\"></textarea>\n            <button id=\"post-comment\" class=\"btn btn-primary\">Post Comment</button>\n          </div>\n          <div class=\"comments-list\">\n            <!-- Comments will be populated here -->\n          </div>\n        </div>\n      </div>\n    </main>\n\n    <!-- Back to Top Button -->\n    <button id=\"back-to-top\" class=\"back-to-top\" style=\"display: none;\">\n      <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <path d=\"m18 15-6-6-6 6\"/>\n      </svg>\n    </button>\n  </div>\n\n  <!-- Scenario Modal -->\n  <div id=\"scenario-modal\" class=\"modal\" style=\"display: none;\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h3>Scenario Details</h3>\n        <button class=\"modal-close\">&times;</button>\n      </div>\n      <form id=\"scenario-form\">\n        <div class=\"input-group\">\n          <label for=\"scenario-name\">Scenario Name</label>\n          <input type=\"text\" id=\"scenario-name\" required>\n        </div>\n        <div class=\"input-group\">\n          <label for=\"scenario-description\">Description</label>\n          <textarea id=\"scenario-description\"></textarea>\n        </div>\n        <div class=\"modal-actions\">\n          <button type=\"button\" class=\"btn btn-secondary modal-cancel\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <!-- Loading Overlays -->\n  <div id=\"loading-overlay\" class=\"loading-overlay\" style=\"display: none;\">\n    <div class=\"loader-content\">\n      <div class=\"spinner\"></div>\n      <p>Processing...</p>\n    </div>\n  </div>\n</div>\n\n<style>\n/* Global Professional Theme */\n:root {\n  --color-primary: #2563eb;\n  --color-secondary: #7c3aed;\n  --color-bg: #ffffff;\n  --color-surface: #f8fafc;\n  --color-text: #1e293b;\n  --color-text-muted: #64748b;\n  --color-border: #e2e8f0;\n  --color-success: #10b981;\n  --color-warning: #f59e0b;\n  --color-danger: #ef4444;\n  --color-info: #3b82f6;\n  --border-radius: 8px;\n  --spacing-unit: 8px;\n  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n[data-theme=\"dark\"] {\n  --color-bg: #0f172a;\n  --color-surface: #1e293b;\n  --color-text: #f1f5f9;\n  --color-text-muted: #94a3b8;\n  --color-border: #334155;\n}\n\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Montserrat:wght@400;500;600;700&display=swap');\n\nbody {\n  font-family: 'Inter', sans-serif;\n  line-height: 1.6;\n  color: var(--color-text);\n  background-color: var(--color-bg);\n  margin: 0;\n  padding: 0;\n  transition: var(--transition);\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 600;\n  color: var(--color-text);\n  margin: 0 0 calc(var(--spacing-unit) * 2) 0;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Animations */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideIn {\n  from { opacity: 0; transform: translateX(-20px); }\n  to { opacity: 1; transform: translateX(0); }\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n/* Utility Classes */\n.container {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 0 calc(var(--spacing-unit) * 3);\n}\n\n.card {\n  background: var(--color-surface);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  padding: calc(var(--spacing-unit) * 3);\n  box-shadow: var(--shadow-sm);\n  transition: var(--transition);\n  animation: fadeIn 0.5s ease-out;\n  margin-bottom: calc(var(--spacing-unit) * 3);\n}\n\n.card:hover {\n  box-shadow: var(--shadow-md);\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: calc(var(--spacing-unit) * 1);\n  padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);\n  border: 1px solid transparent;\n  border-radius: var(--border-radius);\n  font-size: 14px;\n  font-weight: 500;\n  text-decoration: none;\n  cursor: pointer;\n  transition: var(--transition);\n  white-space: nowrap;\n}\n\n.btn-primary {\n  background: var(--color-primary);\n  color: white;\n  border-color: var(--color-primary);\n}\n\n.btn-primary:hover {\n  background: #1d4ed8;\n  border-color: #1d4ed8;\n}\n\n.btn-secondary {\n  background: var(--color-surface);\n  color: var(--color-text);\n  border-color: var(--color-border);\n}\n\n.btn-secondary:hover {\n  background: var(--color-border);\n}\n\n.btn-danger {\n  background: var(--color-danger);\n  color: white;\n  border-color: var(--color-danger);\n}\n\n.btn-accent {\n  background: var(--color-secondary);\n  color: white;\n  border-color: var(--color-secondary);\n}\n\n/* Loading States */\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.loader-content {\n  text-align: center;\n  color: white;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top-color: var(--color-primary);\n  animation: spin 1s ease-in-out infinite;\n  margin: 0 auto calc(var(--spacing-unit) * 2);\n}\n\n.skeleton {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n  0% { background-position: 200% 0; }\n  100% { background-position: -200% 0; }\n}\n\n/* Header */\n.app-header {\n  background: var(--color-bg);\n  border-bottom: 1px solid var(--color-border);\n  box-shadow: var(--shadow-lg);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 80px;\n}\n\n.logo-section {\n  display: flex;\n  align-items: center;\n}\n\n.logo-icon {\n  background: linear-gradient(to right, var(--color-primary), var(--color-secondary));\n  border-radius: 12px;\n  padding: 12px;\n  box-shadow: var(--shadow-lg);\n  color: white;\n}\n\n.logo-text {\n  margin-left: 16px;\n}\n\n.logo-text h1 {\n  background: linear-gradient(to right, var(--color-primary), var(--color-secondary));\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  font-size: 24px;\n  font-weight: 700;\n  margin: 0;\n}\n\n.logo-text p {\n  color: var(--color-text-muted);\n  font-size: 14px;\n  margin: 0;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: calc(var(--spacing-unit) * 3);\n}\n\n.theme-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  background: var(--color-surface);\n  cursor: pointer;\n  transition: var(--transition);\n}\n\n.theme-btn:hover {\n  background: var(--color-border);\n}\n\n.theme-icon {\n  transition: var(--transition);\n}\n\n[data-theme=\"dark\"] .theme-icon.sun {\n  display: none;\n}\n\n[data-theme=\"light\"] .theme-icon.moon,\n:root .theme-icon.moon {\n  display: none;\n}\n\n/* Quick Actions */\n.quick-actions {\n  background: var(--color-surface);\n  border-bottom: 1px solid var(--color-border);\n  padding: calc(var(--spacing-unit) * 2) 0;\n}\n\n.actions-grid {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n.action-btn {\n  display: flex;\n  align-items: center;\n  gap: calc(var(--spacing-unit) * 1);\n  padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 2);\n  background: var(--color-bg);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.action-btn:hover {\n  background: var(--color-primary);\n  color: white;\n  border-color: var(--color-primary);\n}\n\n/* Main Content */\n.main-content {\n  padding: calc(var(--spacing-unit) * 4) 0;\n  min-height: calc(100vh - 200px);\n}\n\n/* Forms and Inputs */\n.input-group {\n  display: flex;\n  flex-direction: column;\n  gap: calc(var(--spacing-unit) * 1);\n}\n\n.input-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: calc(var(--spacing-unit) * 2);\n  margin-bottom: calc(var(--spacing-unit) * 2);\n}\n\nlabel {\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--color-text);\n}\n\ninput, select, textarea {\n  padding: calc(var(--spacing-unit) * 1.5);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  background: var(--color-bg);\n  color: var(--color-text);\n  font-size: 14px;\n  transition: var(--transition);\n}\n\ninput:focus, select:focus, textarea:focus {\n  outline: none;\n  border-color: var(--color-primary);\n  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n}\n\ninput[type=\"range\"] {\n  -webkit-appearance: none;\n  height: 4px;\n  border-radius: 2px;\n  background: var(--color-border);\n  outline: none;\n}\n\ninput[type=\"range\"]::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: var(--color-primary);\n  cursor: pointer;\n}\n\n/* Validation */\n.input-error {\n  border-color: var(--color-danger) !important;\n  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important;\n}\n\n.error-message {\n  color: var(--color-danger);\n  font-size: 12px;\n  margin-top: calc(var(--spacing-unit) * 0.5);\n}\n\n/* KPI Cards */\n.kpi-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: calc(var(--spacing-unit) * 3);\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.kpi-card {\n  background: var(--color-surface);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  padding: calc(var(--spacing-unit) * 3);\n  box-shadow: var(--shadow-sm);\n  transition: var(--transition);\n  animation: fadeIn 0.5s ease-out;\n  display: flex;\n  align-items: center;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n.kpi-card:hover {\n  box-shadow: var(--shadow-md);\n  transform: translateY(-2px);\n}\n\n.kpi-icon {\n  width: 48px;\n  height: 48px;\n  border-radius: var(--border-radius);\n  background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n}\n\n.kpi-content h4 {\n  font-size: 14px;\n  color: var(--color-text-muted);\n  margin-bottom: calc(var(--spacing-unit) * 1);\n}\n\n.counter {\n  font-size: 32px;\n  font-weight: 700;\n  color: var(--color-text);\n  display: inline-block;\n}\n\n.counter.big {\n  font-size: 48px;\n}\n\n.kpi-currency, .kpi-unit {\n  font-size: 18px;\n  color: var(--color-text-muted);\n  margin-left: calc(var(--spacing-unit) * 0.5);\n}\n\n/* Date Filters */\n.date-filters {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.filter-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 2fr;\n  gap: calc(var(--spacing-unit) * 2);\n  align-items: end;\n}\n\n.quick-filters {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 1);\n}\n\n.quick-filter {\n  padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 2);\n  background: var(--color-bg);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  font-size: 14px;\n}\n\n.quick-filter:hover, .quick-filter.active {\n  background: var(--color-primary);\n  color: white;\n  border-color: var(--color-primary);\n}\n\n/* Cost Management */\n.section {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: calc(var(--spacing-unit) * 3);\n}\n\n.cost-summary {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 3);\n  font-weight: 500;\n}\n\n.cost-value {\n  color: var(--color-primary);\n  font-weight: 600;\n}\n\n.costs-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: calc(var(--spacing-unit) * 3);\n}\n\n.cost-panel {\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  overflow: hidden;\n}\n\n.collapsible-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: calc(var(--spacing-unit) * 2);\n  background: var(--color-surface);\n  cursor: pointer;\n  transition: var(--transition);\n  border-bottom: 1px solid var(--color-border);\n}\n\n.collapsible-header:hover {\n  background: var(--color-border);\n}\n\n.collapsible-header .chevron {\n  transition: var(--transition);\n}\n\n.collapsible-header.active .chevron {\n  transform: rotate(180deg);\n}\n\n.collapsible-content {\n  padding: calc(var(--spacing-unit) * 2);\n  background: var(--color-bg);\n  transition: var(--transition);\n}\n\n.collapsible-content.collapsed {\n  display: none;\n}\n\n.cost-input {\n  position: relative;\n}\n\n.currency {\n  position: absolute;\n  right: calc(var(--spacing-unit) * 1.5);\n  top: 50%;\n  transform: translateY(-50%);\n  color: var(--color-text-muted);\n  pointer-events: none;\n}\n\n.input-group {\n  position: relative;\n}\n\n/* Transport Management */\n.transport-actions {\n  display: flex;\n  align-items: center;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n.transport-summary {\n  font-weight: 500;\n}\n\n.transport-legs {\n  display: flex;\n  flex-direction: column;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n.transport-leg {\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  padding: calc(var(--spacing-unit) * 2);\n  background: var(--color-surface);\n}\n\n.leg-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: calc(var(--spacing-unit) * 2);\n}\n\n.remove-leg {\n  background: var(--color-danger);\n  color: white;\n  border: none;\n  border-radius: var(--border-radius);\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: var(--transition);\n}\n\n.leg-total {\n  text-align: right;\n  margin-top: calc(var(--spacing-unit) * 2);\n  padding-top: calc(var(--spacing-unit) * 2);\n  border-top: 1px solid var(--color-border);\n}\n\n/* Advanced Features */\n.advanced-toggle {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 3);\n  background: var(--color-surface);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  font-size: 16px;\n  font-weight: 500;\n}\n\n.advanced-toggle:hover {\n  background: var(--color-border);\n}\n\n.advanced-toggle .chevron {\n  transition: var(--transition);\n}\n\n.advanced-toggle.active .chevron {\n  transform: rotate(180deg);\n}\n\n.advanced-content {\n  margin-top: calc(var(--spacing-unit) * 2);\n  padding: calc(var(--spacing-unit) * 3);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  background: var(--color-bg);\n  animation: slideIn 0.3s ease-out;\n}\n\n.pills-nav {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 1);\n  margin-bottom: calc(var(--spacing-unit) * 3);\n  border-bottom: 1px solid var(--color-border);\n  padding-bottom: calc(var(--spacing-unit) * 2);\n}\n\n.adv-pill {\n  padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);\n  background: transparent;\n  border: 1px solid transparent;\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--color-text-muted);\n}\n\n.adv-pill:hover {\n  background: var(--color-surface);\n  color: var(--color-text);\n}\n\n.adv-pill.active {\n  background: var(--color-primary);\n  color: white;\n  border-color: var(--color-primary);\n}\n\n.adv-content-section {\n  animation: fadeIn 0.3s ease-out;\n}\n\n/* Charts */\n.charts-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n  gap: calc(var(--spacing-unit) * 3);\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n}\n\n.chart-container h3 {\n  margin-bottom: calc(var(--spacing-unit) * 2);\n  text-align: center;\n}\n\n.builder-chart {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n/* Tables */\n.table-container {\n  overflow-x: auto;\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  background: var(--color-bg);\n}\n\n.data-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.data-table th {\n  background: var(--color-surface);\n  padding: calc(var(--spacing-unit) * 2);\n  text-align: left;\n  font-weight: 600;\n  border-bottom: 1px solid var(--color-border);\n  cursor: pointer;\n  transition: var(--transition);\n}\n\n.data-table th:hover {\n  background: var(--color-border);\n}\n\n.data-table td {\n  padding: calc(var(--spacing-unit) * 2);\n  border-bottom: 1px solid var(--color-border);\n}\n\n.data-table tbody tr:hover {\n  background: var(--color-surface);\n}\n\n.data-table tbody tr:nth-child(even) {\n  background: rgba(248, 250, 252, 0.5);\n}\n\n/* Status Badges */\n.status-badge {\n  padding: calc(var(--spacing-unit) * 0.5) calc(var(--spacing-unit) * 1.5);\n  border-radius: calc(var(--border-radius) * 2);\n  font-size: 12px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n\n.status-badge.success {\n  background: rgba(16, 185, 129, 0.1);\n  color: var(--color-success);\n}\n\n.status-badge.processing {\n  background: rgba(245, 158, 11, 0.1);\n  color: var(--color-warning);\n}\n\n.status-badge.danger {\n  background: rgba(239, 68, 68, 0.1);\n  color: var(--color-danger);\n}\n\n/* Alerts */\n.alerts-list {\n  display: flex;\n  flex-direction: column;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n.alert {\n  display: flex;\n  align-items: flex-start;\n  gap: calc(var(--spacing-unit) * 2);\n  padding: calc(var(--spacing-unit) * 2);\n  border-radius: var(--border-radius);\n  border-left: 4px solid;\n}\n\n.alert-warning {\n  background: rgba(245, 158, 11, 0.05);\n  border-color: var(--color-warning);\n  color: #92400e;\n}\n\n.alert-info {\n  background: rgba(59, 130, 246, 0.05);\n  border-color: var(--color-info);\n  color: #1e40af;\n}\n\n.alert-content h4 {\n  margin: 0 0 calc(var(--spacing-unit) * 0.5) 0;\n  font-size: 14px;\n  font-weight: 600;\n}\n\n.alert-content p {\n  margin: 0 0 calc(var(--spacing-unit) * 0.5) 0;\n  font-size: 14px;\n}\n\n.alert-content small {\n  font-size: 12px;\n  opacity: 0.7;\n}\n\n/* Scenario Analysis */\n.scenario-controls {\n  display: flex;\n  align-items: center;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n.parameter-controls {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.param-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: calc(var(--spacing-unit) * 3);\n}\n\n.param-item {\n  display: flex;\n  flex-direction: column;\n  gap: calc(var(--spacing-unit) * 1);\n}\n\n.param-slider {\n  margin: calc(var(--spacing-unit) * 1) 0;\n}\n\n.param-value {\n  font-weight: 600;\n  color: var(--color-primary);\n}\n\n.scenario-comparison {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.comparison-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: calc(var(--spacing-unit) * 3);\n}\n\n.comparison-panels {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: calc(var(--spacing-unit) * 3);\n}\n\n.comparison-panel {\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  padding: calc(var(--spacing-unit) * 2);\n  background: var(--color-surface);\n}\n\n.scenario-chart {\n  width: 100%;\n  height: 200px;\n  margin-bottom: calc(var(--spacing-unit) * 2);\n}\n\n.scenario-metrics {\n  display: flex;\n  flex-direction: column;\n  gap: calc(var(--spacing-unit) * 1);\n}\n\n.metric {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: calc(var(--spacing-unit) * 1);\n  background: var(--color-bg);\n  border-radius: var(--border-radius);\n}\n\n.tornado-container {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.scenario-actions {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n/* Forecast */\n.forecast-controls {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: calc(var(--spacing-unit) * 2);\n  align-items: end;\n}\n\n.range-value {\n  font-weight: 600;\n  color: var(--color-primary);\n  margin-left: calc(var(--spacing-unit) * 1);\n}\n\n.forecast-actions {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 2);\n  margin-top: calc(var(--spacing-unit) * 3);\n}\n\n/* Financial Models */\n.investment-params {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.cashflow-container {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.table-controls {\n  margin-bottom: calc(var(--spacing-unit) * 2);\n}\n\n.financial-calculations {\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.calc-buttons {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 2);\n  margin-bottom: calc(var(--spacing-unit) * 3);\n}\n\n.calc-results {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: calc(var(--spacing-unit) * 3);\n}\n\n.result-card {\n  text-align: center;\n  padding: calc(var(--spacing-unit) * 3);\n  background: var(--color-surface);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n}\n\n.financial-charts {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n  gap: calc(var(--spacing-unit) * 3);\n  margin-bottom: calc(var(--spacing-unit) * 4);\n}\n\n.export-controls {\n  display: flex;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n/* Comments */\n.comment-form {\n  margin-bottom: calc(var(--spacing-unit) * 3);\n}\n\n.comment-form textarea {\n  width: 100%;\n  min-height: 80px;\n  margin-bottom: calc(var(--spacing-unit) * 2);\n  resize: vertical;\n}\n\n.comments-list {\n  display: flex;\n  flex-direction: column;\n  gap: calc(var(--spacing-unit) * 2);\n}\n\n.comment {\n  padding: calc(var(--spacing-unit) * 2);\n  background: var(--color-surface);\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius);\n  animation: slideIn 0.3s ease-out;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: calc(var(--spacing-unit) * 1);\n}\n\n.comment-author {\n  font-weight: 600;\n}\n\n.comment-time {\n  font-size: 12px;\n  color: var(--color-text-muted);\n}\n\n/* Modal */\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  animation: fadeIn 0.3s ease-out;\n}\n\n.modal-content {\n  background: var(--color-bg);\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-lg);\n  max-width: 500px;\n  width: 90%;\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: calc(var(--spacing-unit) * 3);\n  border-bottom: 1px solid var(--color-border);\n}\n\n.modal-close {\n  background: none;\n  border: none;\n  font-size: 24px;\n  cursor: pointer;\n  color: var(--color-text-muted);\n  transition: var(--transition);\n}\n\n.modal-close:hover {\n  color: var(--color-text);\n}\n\n.modal form {\n  padding: calc(var(--spacing-unit) * 3);\n}\n\n.modal-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: calc(var(--spacing-unit) * 2);\n  margin-top: calc(var(--spacing-unit) * 3);\n}\n\n/* Back to Top */\n.back-to-top {\n  position: fixed;\n  bottom: calc(var(--spacing-unit) * 3);\n  right: calc(var(--spacing-unit) * 3);\n  width: 48px;\n  height: 48px;\n  background: var(--color-primary);\n  color: white;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  box-shadow: var(--shadow-lg);\n  transition: var(--transition);\n  z-index: 100;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.back-to-top:hover {\n  background: #1d4ed8;\n  transform: translateY(-2px);\n}\n\n/* Tooltips */\n.tippy-box {\n  background: var(--color-text);\n  color: var(--color-bg);\n  border-radius: var(--border-radius);\n  font-size: 14px;\n  padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 1.5);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .container {\n    padding: 0 calc(var(--spacing-unit) * 2);\n  }\n  \n  .header-content {\n    flex-direction: column;\n    height: auto;\n    padding: calc(var(--spacing-unit) * 2) 0;\n    gap: calc(var(--spacing-unit) * 2);\n  }\n  \n  .kpi-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .filter-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .costs-container {\n    grid-template-columns: 1fr;\n  }\n  \n  .comparison-panels {\n    grid-template-columns: 1fr;\n  }\n  \n  .charts-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .calc-results {\n    grid-template-columns: 1fr;\n  }\n  \n  .financial-charts {\n    grid-template-columns: 1fr;\n  }\n  \n  .actions-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .scenario-controls {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .forecast-controls {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Print Styles */\n@media print {\n  .header-actions,\n  .quick-actions,\n  .back-to-top,\n  .btn {\n    display: none;\n  }\n  \n  .card {\n    box-shadow: none;\n    border: 1px solid #000;\n  }\n  \n  body {\n    background: white;\n    color: black;\n  }\n}\n\n/* High Contrast Mode */\n@media (prefers-contrast: high) {\n  :root {\n    --color-border: #000;\n    --color-text: #000;\n    --color-bg: #fff;\n  }\n}\n\n/* Reduced Motion */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n</style>\n\n<script>\n// Dynamic Library Loader\nconst REQUIRED_LIBRARIES = {\n  flatpickr: {\n    js: 'https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/flatpickr.min.js',\n    css: 'https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/flatpickr.min.css'\n  },\n  Chart: {\n    js: 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js'\n  },\n  Sortable: {\n    js: 'https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js'\n  },\n  html2canvas: {\n    js: 'https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js'\n  },\n  jsPDF: {\n    js: 'https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js'\n  },\n  XLSX: {\n    js: 'https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js'\n  },\n  introJs: {\n    js: 'https://cdn.jsdelivr.net/npm/intro.js@7.2.0/intro.min.js',\n    css: 'https://cdn.jsdelivr.net/npm/intro.js@7.2.0/introjs.min.css'\n  },\n  tippy: {\n    js: 'https://unpkg.com/@popperjs/core@2/dist/umd/popper.min.js',\n    js2: 'https://unpkg.com/tippy.js@6/dist/tippy-bundle.umd.js',\n    css: 'https://unpkg.com/tippy.js@6/dist/tippy.css'\n  }\n};\n\nlet librariesLoadedCount = 0;\nconst totalLibraries = Object.keys(REQUIRED_LIBRARIES).length;\n\nfunction loadLibrary(name, config) {\n  return new Promise((resolve, reject) => {\n    // Check if already loaded\n    if (window[name]) {\n      resolve();\n      return;\n    }\n    \n    const loadPromises = [];\n    \n    // Load CSS\n    if (config.css) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = config.css;\n      document.head.appendChild(link);\n    }\n    \n    // Load JS\n    if (config.js) {\n      loadPromises.push(new Promise((resolveJs, rejectJs) => {\n        const script = document.createElement('script');\n        script.src = config.js;\n        script.onload = () => resolveJs();\n        script.onerror = () => rejectJs();\n        document.head.appendChild(script);\n      }));\n    }\n    \n    // Load second JS (for libraries like tippy that need multiple scripts)\n    if (config.js2) {\n      loadPromises.push(new Promise((resolveJs2, rejectJs2) => {\n        const script2 = document.createElement('script');\n        script2.src = config.js2;\n        script2.onload = () => resolveJs2();\n        script2.onerror = () => rejectJs2();\n        document.head.appendChild(script2);\n      }));\n    }\n    \n    Promise.all(loadPromises).then(() => {\n      librariesLoadedCount++;\n      updateLoadingProgress();\n      resolve();\n    }).catch(reject);\n  });\n}\n\nfunction updateLoadingProgress() {\n  const progress = (librariesLoadedCount / totalLibraries) * 100;\n  const loaderText = document.querySelector('#library-loader p');\n  if (loaderText) {\n    loaderText.textContent = `Loading libraries... ${Math.round(progress)}%`;\n  }\n}\n\nasync function loadAllLibraries() {\n  const loadPromises = Object.entries(REQUIRED_LIBRARIES).map(([name, config]) => \n    loadLibrary(name, config)\n  );\n  \n  try {\n    await Promise.all(loadPromises);\n    document.getElementById('library-loader').style.display = 'none';\n    document.getElementById('main-app').style.display = 'block';\n    initializeApp();\n  } catch (error) {\n    console.error('Error loading libraries:', error);\n    document.querySelector('#library-loader p').textContent = 'Error loading libraries. Please refresh.';\n  }\n}\n\n// App State\nlet appState = {\n  theme: localStorage.getItem('theme') || 'light',\n  costs: {\n    rawMaterial: 0,\n    labor: 0,\n    packaging: 0,\n    utilities: 0,\n    overhead: 0,\n    insurance: 0\n  },\n  transport: [],\n  scenarios: JSON.parse(localStorage.getItem('scenarios') || '[]'),\n  currentScenario: null,\n  comments: JSON.parse(localStorage.getItem('comments') || '[]'),\n  tourCompleted: localStorage.getItem('tour-completed') === 'true'\n};\n\n// Initialize Application\nfunction initializeApp() {\n  setupTheme();\n  setupEventListeners();\n  setupDatePickers();\n  setupTooltips();\n  initializeCharts();\n  setupSortableTables();\n  setupFormValidation();\n  setupCounters();\n  setupBackToTop();\n  setupTransportLegs();\n  setupAdvancedFeatures();\n  setupScenarios();\n  setupForecast();\n  setupFinancialModels();\n  setupComments();\n  setupTour();\n  \n  // Apply theme\n  document.documentElement.setAttribute('data-theme', appState.theme);\n  \n  // Load initial data\n  updateCalculations();\n  renderComments();\n  \n  console.log('KostoPro Enhanced initialized successfully!');\n}\n\n// Theme Management\nfunction setupTheme() {\n  const themeToggle = document.getElementById('theme-toggle');\n  themeToggle.addEventListener('click', () => {\n    appState.theme = appState.theme === 'light' ? 'dark' : 'light';\n    document.documentElement.setAttribute('data-theme', appState.theme);\n    localStorage.setItem('theme', appState.theme);\n  });\n}\n\n// Event Listeners\nfunction setupEventListeners() {\n  // Cost inputs\n  document.querySelectorAll('.cost-input').forEach(input => {\n    input.addEventListener('input', updateCalculations);\n    input.addEventListener('blur', validateInput);\n  });\n  \n  // Transport inputs\n  document.addEventListener('input', (e) => {\n    if (e.target.classList.contains('transport-input')) {\n      updateTransportCalculations();\n    }\n  });\n  \n  // Quick actions\n  document.querySelectorAll('.action-btn').forEach(btn => {\n    btn.addEventListener('click', handleQuickAction);\n  });\n  \n  // Date range filters\n  document.querySelectorAll('.quick-filter').forEach(filter => {\n    filter.addEventListener('click', handleQuickDateFilter);\n  });\n  \n  // Collapsible sections\n  document.querySelectorAll('.collapsible-header').forEach(header => {\n    header.addEventListener('click', toggleCollapsible);\n  });\n  \n  // Advanced toggle\n  document.getElementById('adv-toggle').addEventListener('click', toggleAdvanced);\n  \n  // Advanced pills\n  document.querySelectorAll('.adv-pill').forEach(pill => {\n    pill.addEventListener('click', switchAdvancedTab);\n  });\n  \n  // Parameter sliders\n  document.querySelectorAll('.param-slider').forEach(slider => {\n    slider.addEventListener('input', updateParameterValue);\n    slider.addEventListener('change', updateScenarios);\n  });\n}\n\n// Date Picker Setup\nfunction setupDatePickers() {\n  if (typeof flatpickr !== 'undefined') {\n    flatpickr('.date-picker', {\n      dateFormat: 'Y-m-d',\n      allowInput: true,\n      theme: appState.theme\n    });\n  }\n}\n\n// Tooltips Setup\nfunction setupTooltips() {\n  if (typeof tippy !== 'undefined') {\n    tippy('[data-tooltip]', {\n      theme: appState.theme,\n      animation: 'fade',\n      delay: [500, 0]\n    });\n  }\n}\n\n// Charts Initialization\nfunction initializeCharts() {\n  if (typeof Chart === 'undefined') return;\n  \n  // Lazy load charts using Intersection Observer\n  const chartObserver = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const canvas = entry.target;\n        initializeChart(canvas);\n        chartObserver.unobserve(canvas);\n      }\n    });\n  });\n  \n  document.querySelectorAll('.builder-chart').forEach(canvas => {\n    chartObserver.observe(canvas);\n  });\n}\n\nfunction initializeChart(canvas) {\n  const ctx = canvas.getContext('2d');\n  const chartId = canvas.id;\n  \n  let config;\n  \n  switch (chartId) {\n    case 'chart-cost-vs-profit':\n      config = {\n        type: 'bar',\n        data: {\n          labels: ['Q1', 'Q2', 'Q3', 'Q4'],\n          datasets: [{\n            label: 'Cost',\n            data: [12000, 13500, 11800, 14200],\n            backgroundColor: 'rgba(239, 68, 68, 0.5)',\n            borderColor: 'rgba(239, 68, 68, 1)',\n            borderWidth: 1\n          }, {\n            label: 'Profit',\n            data: [8000, 9200, 7800, 9800],\n            backgroundColor: 'rgba(16, 185, 129, 0.5)',\n            borderColor: 'rgba(16, 185, 129, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: 'Quarterly Cost vs Profit'\n            }\n          }\n        }\n      };\n      break;\n      \n    case 'chart-price-trend':\n      config = {\n        type: 'line',\n        data: {\n          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n          datasets: [{\n            label: 'Average Price',\n            data: [25.50, 26.20, 24.80, 27.10, 28.50, 26.90],\n            borderColor: 'rgba(37, 99, 235, 1)',\n            backgroundColor: 'rgba(37, 99, 235, 0.1)',\n            tension: 0.4\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: 'Price Trend Analysis'\n            }\n          }\n        }\n      };\n      break;\n      \n    case 'chart-direct-indirect':\n      config = {\n        type: 'pie',\n        data: {\n          labels: ['Direct Costs', 'Indirect Costs'],\n          datasets: [{\n            data: [65, 35],\n            backgroundColor: [\n              'rgba(37, 99, 235, 0.8)',\n              'rgba(124, 58, 237, 0.8)'\n            ]\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: 'Cost Distribution'\n            }\n          }\n        }\n      };\n      break;\n      \n    default:\n      config = {\n        type: 'line',\n        data: {\n          labels: ['Point 1', 'Point 2', 'Point 3'],\n          datasets: [{\n            label: 'Sample Data',\n            data: [10, 20, 15],\n            borderColor: 'rgba(37, 99, 235, 1)',\n            backgroundColor: 'rgba(37, 99, 235, 0.1)'\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      };\n  }\n  \n  new Chart(ctx, config);\n}\n\n// Table Sorting\nfunction setupSortableTables() {\n  document.querySelectorAll('.sortable th[data-sort]').forEach(header => {\n    header.addEventListener('click', sortTable);\n    header.style.cursor = 'pointer';\n  });\n}\n\nfunction sortTable(e) {\n  const header = e.target;\n  const table = header.closest('table');\n  const tbody = table.querySelector('tbody');\n  const rows = Array.from(tbody.querySelectorAll('tr'));\n  const column = header.cellIndex;\n  const isNumeric = header.dataset.sort === 'cost' || header.dataset.sort === 'profit';\n  \n  const sortedRows = rows.sort((a, b) => {\n    const aVal = a.cells[column].textContent.trim();\n    const bVal = b.cells[column].textContent.trim();\n    \n    if (isNumeric) {\n      return parseFloat(aVal.replace(/[€,]/g, '')) - parseFloat(bVal.replace(/[€,]/g, ''));\n    }\n    \n    return aVal.localeCompare(bVal);\n  });\n  \n  tbody.innerHTML = '';\n  sortedRows.forEach(row => tbody.appendChild(row));\n}\n\n// Form Validation\nfunction setupFormValidation() {\n  document.querySelectorAll('input[required], select[required]').forEach(input => {\n    input.addEventListener('blur', validateInput);\n    input.addEventListener('input', clearValidationError);\n  });\n}\n\nfunction validateInput(e) {\n  const input = e.target;\n  const value = input.value.trim();\n  \n  // Remove existing error\n  clearValidationError({ target: input });\n  \n  if (input.required && !value) {\n    showValidationError(input, 'This field is required');\n    return false;\n  }\n  \n  if (input.type === 'number') {\n    const num = parseFloat(value);\n    const min = parseFloat(input.min);\n    const max = parseFloat(input.max);\n    \n    if (isNaN(num)) {\n      showValidationError(input, 'Please enter a valid number');\n      return false;\n    }\n    \n    if (min !== undefined && num < min) {\n      showValidationError(input, `Value must be at least ${min}`);\n      return false;\n    }\n    \n    if (max !== undefined && num > max) {\n      showValidationError(input, `Value must be no more than ${max}`);\n      return false;\n    }\n    \n    // Threshold checking\n    const threshold = parseFloat(input.dataset.threshold);\n    if (threshold && num > threshold) {\n      showThresholdWarning(input, `Value exceeds threshold of ${threshold}`);\n    }\n  }\n  \n  return true;\n}\n\nfunction showValidationError(input, message) {\n  input.classList.add('input-error');\n  \n  const errorElement = document.createElement('div');\n  errorElement.className = 'error-message';\n  errorElement.textContent = message;\n  \n  input.parentNode.appendChild(errorElement);\n}\n\nfunction clearValidationError(e) {\n  const input = e.target;\n  input.classList.remove('input-error');\n  \n  const errorElement = input.parentNode.querySelector('.error-message');\n  if (errorElement) {\n    errorElement.remove();\n  }\n}\n\nfunction showThresholdWarning(input, message) {\n  // Create alert notification\n  showAlert(message, 'warning');\n}\n\n// Animated Counters\nfunction setupCounters() {\n  const counterObserver = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        animateCounter(entry.target);\n        counterObserver.unobserve(entry.target);\n      }\n    });\n  });\n  \n  document.querySelectorAll('.counter').forEach(counter => {\n    counterObserver.observe(counter);\n  });\n}\n\nfunction animateCounter(element) {\n  const target = parseFloat(element.dataset.target) || 0;\n  const duration = 1500;\n  const start = performance.now();\n  const startValue = 0;\n  \n  function updateCounter(currentTime) {\n    const elapsed = currentTime - start;\n    const progress = Math.min(elapsed / duration, 1);\n    \n    const current = startValue + (target - startValue) * easeOutCubic(progress);\n    \n    if (element.textContent.includes('€')) {\n      element.textContent = `€${current.toLocaleString('en-US', { maximumFractionDigits: 0 })}`;\n    } else if (element.textContent.includes('%')) {\n      element.textContent = `${current.toFixed(1)}%`;\n    } else {\n      element.textContent = current.toLocaleString('en-US', { maximumFractionDigits: 0 });\n    }\n    \n    if (progress < 1) {\n      requestAnimationFrame(updateCounter);\n    }\n  }\n  \n  requestAnimationFrame(updateCounter);\n}\n\nfunction easeOutCubic(t) {\n  return 1 - Math.pow(1 - t, 3);\n}\n\n// Back to Top Button\nfunction setupBackToTop() {\n  const backToTop = document.getElementById('back-to-top');\n  \n  window.addEventListener('scroll', () => {\n    if (window.pageYOffset > 300) {\n      backToTop.style.display = 'flex';\n    } else {\n      backToTop.style.display = 'none';\n    }\n  });\n  \n  backToTop.addEventListener('click', () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  });\n}\n\n// Calculations\nfunction updateCalculations() {\n  const costs = appState.costs;\n  const totalDirectCosts = costs.rawMaterial + costs.labor + costs.packaging;\n  const totalIndirectCosts = costs.utilities + costs.overhead + costs.insurance;\n  const totalCosts = totalDirectCosts + totalIndirectCosts;\n  \n  document.getElementById('total-cost').textContent = `€${totalCosts.toFixed(2)}`;\n  \n  // Assuming a quantity for per-unit calculation\n  const quantity = parseFloat(document.getElementById('batch-size')?.value || 100);\n  const costPerUnit = totalCosts / quantity;\n  document.getElementById('cost-per-unit').textContent = `€${costPerUnit.toFixed(2)}`;\n  \n  // Update cost inputs\n  document.querySelectorAll('.cost-input').forEach(input => {\n    const costType = input.id.replace('-', '');\n    if (costs[costType] !== undefined) {\n      costs[costType] = parseFloat(input.value) || 0;\n    }\n  });\n}\n\n// Transport Management\nfunction setupTransportLegs() {\n  document.getElementById('add-transport-leg').addEventListener('click', addTransportLeg);\n  \n  // Add initial transport leg\n  addTransportLeg();\n}\n\nfunction addTransportLeg() {\n  const template = document.getElementById('transport-leg-template');\n  const clone = template.content.cloneNode(true);\n  const legNumber = document.querySelectorAll('.transport-leg').length + 1;\n  \n  clone.querySelector('.leg-number').textContent = legNumber;\n  clone.querySelector('.remove-leg').addEventListener('click', removeTransportLeg);\n  \n  document.getElementById('transport-legs').appendChild(clone);\n  updateTransportCalculations();\n}\n\nfunction removeTransportLeg(e) {\n  e.target.closest('.transport-leg').remove();\n  updateTransportCalculations();\n  \n  // Renumber legs\n  document.querySelectorAll('.leg-number').forEach((numberElement, index) => {\n    numberElement.textContent = index + 1;\n  });\n}\n\nfunction updateTransportCalculations() {\n  let totalTransportCost = 0;\n  \n  document.querySelectorAll('.transport-leg').forEach(leg => {\n    const distance = parseFloat(leg.querySelector('input[name=\"distance\"]').value) || 0;\n    const costPerKm = parseFloat(leg.querySelector('input[name=\"cost-per-km\"]').value) || 0;\n    const fixedCost = parseFloat(leg.querySelector('input[name=\"fixed-cost\"]').value) || 0;\n    \n    const legCost = (distance * costPerKm) + fixedCost;\n    leg.querySelector('.leg-cost').textContent = `€${legCost.toFixed(2)}`;\n    \n    totalTransportCost += legCost;\n  });\n  \n  document.querySelector('#transport-summary .cost-value').textContent = `€${totalTransportCost.toFixed(2)}`;\n}\n\n// Advanced Features\nfunction setupAdvancedFeatures() {\n  // Already handled in event listeners\n}\n\nfunction toggleCollapsible(e) {\n  const header = e.currentTarget;\n  const targetId = header.dataset.target;\n  const content = document.getElementById(targetId);\n  \n  header.classList.toggle('active');\n  content.classList.toggle('collapsed');\n}\n\nfunction toggleAdvanced() {\n  const toggle = document.getElementById('adv-toggle');\n  const content = document.getElementById('adv-content');\n  \n  toggle.classList.toggle('active');\n  \n  if (content.style.display === 'none') {\n    content.style.display = 'block';\n  } else {\n    content.style.display = 'none';\n  }\n}\n\nfunction switchAdvancedTab(e) {\n  const pill = e.target;\n  const targetId = pill.dataset.target;\n  \n  // Update pills\n  document.querySelectorAll('.adv-pill').forEach(p => p.classList.remove('active'));\n  pill.classList.add('active');\n  \n  // Update content\n  document.querySelectorAll('.adv-content-section').forEach(section => {\n    section.style.display = 'none';\n  });\n  document.getElementById(targetId).style.display = 'block';\n}\n\nfunction updateParameterValue(e) {\n  const slider = e.target;\n  const valueElement = slider.parentNode.querySelector('.param-value');\n  valueElement.textContent = `${slider.value}%`;\n}\n\n// Quick Actions\nfunction handleQuickAction(e) {\n  const action = e.currentTarget.dataset.action;\n  \n  switch (action) {\n    case 'new-cost':\n      // Reset all cost inputs\n      document.querySelectorAll('.cost-input').forEach(input => {\n        input.value = 0;\n      });\n      updateCalculations();\n      showAlert('New cost calculation started', 'info');\n      break;\n      \n    case 'export':\n      exportToPDF();\n      break;\n      \n    case 'share':\n      shareCalculation();\n      break;\n  }\n}\n\nfunction handleQuickDateFilter(e) {\n  const filter = e.target;\n  const days = parseInt(filter.dataset.range);\n  \n  // Update active filter\n  document.querySelectorAll('.quick-filter').forEach(f => f.classList.remove('active'));\n  filter.classList.add('active');\n  \n  // Calculate dates\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(endDate.getDate() - days);\n  \n  // Update date inputs\n  document.getElementById('start-date').value = startDate.toISOString().split('T')[0];\n  document.getElementById('end-date').value = endDate.toISOString().split('T')[0];\n  \n  showAlert(`Date range set to last ${days} days`, 'info');\n}\n\n// Scenarios\nfunction setupScenarios() {\n  document.getElementById('scenario-new').addEventListener('click', createNewScenario);\n  document.getElementById('scenario-save').addEventListener('click', saveCurrentScenario);\n  document.getElementById('scenario-delete').addEventListener('click', deleteCurrentScenario);\n  document.getElementById('scenario-select').addEventListener('change', loadScenario);\n  document.getElementById('export-scenario').addEventListener('click', exportScenario);\n  document.getElementById('share-scenario').addEventListener('click', shareScenario);\n  \n  loadScenarioList();\n}\n\nfunction createNewScenario() {\n  const modal = document.getElementById('scenario-modal');\n  modal.style.display = 'flex';\n  \n  document.getElementById('scenario-name').value = '';\n  document.getElementById('scenario-description').value = '';\n  \n  document.getElementById('scenario-form').onsubmit = (e) => {\n    e.preventDefault();\n    \n    const name = document.getElementById('scenario-name').value;\n    const description = document.getElementById('scenario-description').value;\n    \n    const scenario = {\n      id: Date.now(),\n      name,\n      description,\n      costs: { ...appState.costs },\n      parameters: getCurrentParameters(),\n      createdAt: new Date().toISOString()\n    };\n    \n    appState.scenarios.push(scenario);\n    localStorage.setItem('scenarios', JSON.stringify(appState.scenarios));\n    \n    loadScenarioList();\n    modal.style.display = 'none';\n    \n    showAlert('Scenario created successfully', 'success');\n  };\n}\n\nfunction saveCurrentScenario() {\n  if (!appState.currentScenario) {\n    createNewScenario();\n    return;\n  }\n  \n  const scenario = appState.scenarios.find(s => s.id === appState.currentScenario);\n  if (scenario) {\n    scenario.costs = { ...appState.costs };\n    scenario.parameters = getCurrentParameters();\n    scenario.updatedAt = new Date().toISOString();\n    \n    localStorage.setItem('scenarios', JSON.stringify(appState.scenarios));\n    showAlert('Scenario saved successfully', 'success');\n  }\n}\n\nfunction deleteCurrentScenario() {\n  if (!appState.currentScenario) return;\n  \n  if (confirm('Are you sure you want to delete this scenario?')) {\n    appState.scenarios = appState.scenarios.filter(s => s.id !== appState.currentScenario);\n    appState.currentScenario = null;\n    \n    localStorage.setItem('scenarios', JSON.stringify(appState.scenarios));\n    loadScenarioList();\n    \n    showAlert('Scenario deleted successfully', 'success');\n  }\n}\n\nfunction loadScenario(e) {\n  const scenarioId = parseInt(e.target.value);\n  if (!scenarioId) return;\n  \n  const scenario = appState.scenarios.find(s => s.id === scenarioId);\n  if (scenario) {\n    appState.currentScenario = scenarioId;\n    appState.costs = { ...scenario.costs };\n    \n    // Update inputs\n    Object.entries(scenario.costs).forEach(([key, value]) => {\n      const input = document.getElementById(key.replace(/([A-Z])/g, '-$1').toLowerCase());\n      if (input) input.value = value;\n    });\n    \n    updateCalculations();\n    updateScenarios();\n    \n    showAlert('Scenario loaded successfully', 'success');\n  }\n}\n\nfunction loadScenarioList() {\n  const select = document.getElementById('scenario-select');\n  select.innerHTML = '<option value=\"\">Select Scenario</option>';\n  \n  appState.scenarios.forEach(scenario => {\n    const option = document.createElement('option');\n    option.value = scenario.id;\n    option.textContent = scenario.name;\n    select.appendChild(option);\n  });\n}\n\nfunction getCurrentParameters() {\n  const parameters = {};\n  document.querySelectorAll('.param-slider').forEach(slider => {\n    parameters[slider.dataset.param] = parseFloat(slider.value);\n  });\n  return parameters;\n}\n\nfunction updateScenarios() {\n  // Update scenario charts and metrics\n  // This is a placeholder for complex scenario analysis\n  console.log('Updating scenario analysis...');\n}\n\nfunction exportScenario() {\n  if (!appState.currentScenario) {\n    showAlert('Please select a scenario first', 'warning');\n    return;\n  }\n  \n  const scenario = appState.scenarios.find(s => s.id === appState.currentScenario);\n  const dataStr = JSON.stringify(scenario, null, 2);\n  const dataBlob = new Blob([dataStr], { type: 'application/json' });\n  \n  const link = document.createElement('a');\n  link.href = URL.createObjectURL(dataBlob);\n  link.download = `scenario-${scenario.name}.json`;\n  link.click();\n  \n  showAlert('Scenario exported successfully', 'success');\n}\n\nfunction shareScenario() {\n  if (!appState.currentScenario) {\n    showAlert('Please select a scenario first', 'warning');\n    return;\n  }\n  \n  const scenario = appState.scenarios.find(s => s.id === appState.currentScenario);\n  const shareText = `Check out this KostoPro scenario: ${scenario.name}\\n\\nDescription: ${scenario.description}`;\n  \n  if (navigator.share) {\n    navigator.share({\n      title: 'KostoPro Scenario',\n      text: shareText\n    });\n  } else {\n    navigator.clipboard.writeText(shareText).then(() => {\n      showAlert('Scenario details copied to clipboard', 'success');\n    });\n  }\n}\n\n// Forecast\nfunction setupForecast() {\n  document.getElementById('horizon-input').addEventListener('change', updateForecast);\n  document.getElementById('growth-rate-input').addEventListener('input', updateGrowthRateDisplay);\n  document.getElementById('growth-rate-input').addEventListener('change', updateForecast);\n  document.getElementById('export-forecast').addEventListener('click', exportForecastChart);\n  document.getElementById('csv-download-forecast').addEventListener('click', downloadForecastCSV);\n  document.getElementById('ai-forecast-btn').addEventListener('click', generateAIExpensesForecast);\n  \n  updateForecast();\n}\n\nfunction updateGrowthRateDisplay(e) {\n  const value = e.target.value;\n  e.target.nextElementSibling.textContent = `${value}%`;\n}\n\nfunction updateForecast() {\n  const horizon = parseInt(document.getElementById('horizon-input').value);\n  const growthRate = parseFloat(document.getElementById('growth-rate-input').value) / 100;\n  const baseRevenue = 10000; // Base monthly revenue\n  \n  const forecastData = [];\n  let cumulativeRevenue = 0;\n  \n  for (let i = 0; i < horizon; i++) {\n    const monthlyRevenue = baseRevenue * Math.pow(1 + growthRate, i);\n    cumulativeRevenue += monthlyRevenue;\n    \n    forecastData.push({\n      month: i + 1,\n      revenue: monthlyRevenue,\n      growth: i === 0 ? 0 : ((monthlyRevenue / (baseRevenue * Math.pow(1 + growthRate, i - 1))) - 1) * 100,\n      cumulative: cumulativeRevenue\n    });\n  }\n  \n  // Update summary cards\n  const totalRevenue = cumulativeRevenue;\n  const avgGrowthRate = growthRate * 100;\n  const confidenceLevel = Math.max(50, 95 - (horizon * 2)); // Confidence decreases with longer horizons\n  \n  updateCounter(document.querySelector('#forecast-summary .counter[data-target]'), totalRevenue);\n  document.querySelector('#forecast-summary .counter[data-target]').dataset.target = totalRevenue;\n  \n  // Update forecast table\n  updateForecastTable(forecastData);\n  \n  // Update forecast chart\n  updateForecastChart(forecastData);\n}\n\nfunction updateForecastTable(data) {\n  const tbody = document.querySelector('#forecast-table tbody');\n  tbody.innerHTML = '';\n  \n  data.forEach(row => {\n    const tr = document.createElement('tr');\n    tr.innerHTML = `\n      <td>Month ${row.month}</td>\n      <td>€${row.revenue.toLocaleString('en-US', { maximumFractionDigits: 0 })}</td>\n      <td>${row.growth.toFixed(1)}%</td>\n      <td>€${row.cumulative.toLocaleString('en-US', { maximumFractionDigits: 0 })}</td>\n    `;\n    tbody.appendChild(tr);\n  });\n}\n\nfunction updateForecastChart(data) {\n  const canvas = document.getElementById('forecast-chart');\n  if (!canvas) return;\n  \n  const ctx = canvas.getContext('2d');\n  \n  // Destroy existing chart if it exists\n  if (canvas.chart) {\n    canvas.chart.destroy();\n  }\n  \n  canvas.chart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: data.map(d => `M${d.month}`),\n      datasets: [{\n        label: 'Actual Revenue',\n        data: data.slice(0, Math.min(6, data.length)).map(d => d.revenue),\n        borderColor: 'rgba(37, 99, 235, 1)',\n        backgroundColor: 'rgba(37, 99, 235, 0.1)',\n        borderWidth: 2,\n        tension: 0.4\n      }, {\n        label: 'Projected Revenue',\n        data: data.slice(6).map(d => d.revenue),\n        borderColor: 'rgba(124, 58, 237, 1)',\n        backgroundColor: 'rgba(124, 58, 237, 0.1)',\n        borderWidth: 2,\n        borderDash: [5, 5],\n        tension: 0.4\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Revenue Forecast'\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            callback: function(value) {\n              return '€' + value.toLocaleString();\n            }\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction exportForecastChart() {\n  const canvas = document.getElementById('forecast-chart');\n  if (canvas && typeof html2canvas !== 'undefined') {\n    html2canvas(canvas.parentElement).then(canvas => {\n      const link = document.createElement('a');\n      link.download = 'forecast-chart.png';\n      link.href = canvas.toDataURL();\n      link.click();\n      \n      showAlert('Forecast chart exported successfully', 'success');\n    });\n  }\n}\n\nfunction downloadForecastCSV() {\n  const table = document.getElementById('forecast-table');\n  const csv = tableToCSV(table);\n  \n  const blob = new Blob([csv], { type: 'text/csv' });\n  const link = document.createElement('a');\n  link.href = URL.createObjectURL(blob);\n  link.download = 'forecast-data.csv';\n  link.click();\n  \n  showAlert('Forecast data downloaded successfully', 'success');\n}\n\nfunction generateAIExpensesForecast() {\n  showAlert('AI Forecast generation started...', 'info');\n  \n  // Simulate AI processing\n  setTimeout(() => {\n    // Apply some intelligent adjustments to the forecast\n    const growthInput = document.getElementById('growth-rate-input');\n    const currentGrowth = parseFloat(growthInput.value);\n    \n    // AI suggests optimal growth rate based on historical data\n    const aiOptimalGrowth = Math.max(0, currentGrowth + (Math.random() - 0.5) * 4);\n    growthInput.value = aiOptimalGrowth.toFixed(1);\n    updateGrowthRateDisplay({ target: growthInput });\n    updateForecast();\n    \n    showAlert('AI Forecast completed with optimization suggestions', 'success');\n  }, 2000);\n}\n\n// Financial Models\nfunction setupFinancialModels() {\n  document.getElementById('add-cashflow-row').addEventListener('click', addCashflowRow);\n  document.getElementById('calculate-npv').addEventListener('click', calculateNPV);\n  document.getElementById('calculate-irr').addEventListener('click', calculateIRR);\n  document.getElementById('run-montecarlo').addEventListener('click', runMonteCarloSimulation);\n  document.getElementById('export-financial').addEventListener('click', exportFinancialCharts);\n  document.getElementById('csv-download-financial').addEventListener('click', downloadFinancialCSV);\n  document.getElementById('export-dashboard').addEventListener('click', exportFullDashboard);\n  \n  // Setup cashflow table event listeners\n  setupCashflowTable();\n}\n\nfunction setupCashflowTable() {\n  document.addEventListener('click', (e) => {\n    if (e.target.classList.contains('remove-row')) {\n      e.target.closest('tr').remove();\n      updateCashflowCalculations();\n    }\n  });\n  \n  document.addEventListener('input', (e) => {\n    if (e.target.classList.contains('cash-inflow') || e.target.classList.contains('cash-outflow')) {\n      updateCashflowCalculations();\n    }\n  });\n}\n\nfunction addCashflowRow() {\n  const table = document.getElementById('cashflows-table');\n  const tbody = table.querySelector('tbody');\n  const rowCount = tbody.children.length;\n  \n  const row = document.createElement('tr');\n  row.innerHTML = `\n    <td>${rowCount}</td>\n    <td><input type=\"number\" value=\"0\" class=\"cash-inflow\"></td>\n    <td><input type=\"number\" value=\"0\" class=\"cash-outflow\"></td>\n    <td class=\"net-flow\">€0</td>\n    <td class=\"present-value\">€0</td>\n    <td><button class=\"remove-row btn-danger\">Remove</button></td>\n  `;\n  \n  tbody.appendChild(row);\n  updateCashflowCalculations();\n}\n\nfunction updateCashflowCalculations() {\n  const discountRate = parseFloat(document.getElementById('discount-rate-input').value) / 100;\n  const rows = document.querySelectorAll('#cashflows-table tbody tr');\n  \n  rows.forEach((row, index) => {\n    const inflow = parseFloat(row.querySelector('.cash-inflow')?.value || 0);\n    const outflow = parseFloat(row.querySelector('.cash-outflow')?.value || 0);\n    const netFlow = inflow - outflow;\n    const presentValue = netFlow / Math.pow(1 + discountRate, index);\n    \n    row.querySelector('.net-flow').textContent = `€${netFlow.toLocaleString()}`;\n    row.querySelector('.present-value').textContent = `€${presentValue.toLocaleString()}`;\n  });\n}\n\nfunction calculateNPV() {\n  const initialInvestment = parseFloat(document.getElementById('initial-investment-input').value);\n  const discountRate = parseFloat(document.getElementById('discount-rate-input').value) / 100;\n  const rows = document.querySelectorAll('#cashflows-table tbody tr');\n  \n  let npv = -initialInvestment;\n  \n  rows.forEach((row, index) => {\n    const inflow = parseFloat(row.querySelector('.cash-inflow')?.value || 0);\n    const outflow = parseFloat(row.querySelector('.cash-outflow')?.value || 0);\n    const netFlow = inflow - outflow;\n    const presentValue = netFlow / Math.pow(1 + discountRate, index);\n    \n    npv += presentValue;\n  });\n  \n  const npvElement = document.getElementById('npv-value');\n  npvElement.textContent = `€${npv.toLocaleString()}`;\n  npvElement.dataset.target = npv;\n  animateCounter(npvElement);\n  \n  showAlert(`NPV calculated: €${npv.toLocaleString()}`, npv > 0 ? 'success' : 'warning');\n}\n\nfunction calculateIRR() {\n  // Simplified IRR calculation using approximation\n  const initialInvestment = parseFloat(document.getElementById('initial-investment-input').value);\n  const rows = document.querySelectorAll('#cashflows-table tbody tr');\n  \n  const cashflows = [-initialInvestment];\n  rows.forEach(row => {\n    const inflow = parseFloat(row.querySelector('.cash-inflow')?.value || 0);\n    const outflow = parseFloat(row.querySelector('.cash-outflow')?.value || 0);\n    cashflows.push(inflow - outflow);\n  });\n  \n  // Simple approximation - in real implementation, use Newton-Raphson method\n  let irr = 0.1; // Starting guess of 10%\n  \n  for (let i = 0; i < 100; i++) {\n    let npv = 0;\n    let dnpv = 0;\n    \n    for (let j = 0; j < cashflows.length; j++) {\n      npv += cashflows[j] / Math.pow(1 + irr, j);\n      dnpv -= j * cashflows[j] / Math.pow(1 + irr, j + 1);\n    }\n    \n    if (Math.abs(npv) < 0.01) break;\n    irr = irr - npv / dnpv;\n  }\n  \n  const irrPercentage = irr * 100;\n  const irrElement = document.getElementById('irr-value');\n  irrElement.textContent = `${irrPercentage.toFixed(1)}%`;\n  irrElement.dataset.target = irrPercentage;\n  animateCounter(irrElement);\n  \n  showAlert(`IRR calculated: ${irrPercentage.toFixed(1)}%`, 'success');\n}\n\nfunction runMonteCarloSimulation() {\n  showAlert('Running Monte Carlo simulation...', 'info');\n  \n  setTimeout(() => {\n    // Simulate 1000 scenarios\n    const results = [];\n    const baseNPV = parseFloat(document.getElementById('npv-value').textContent.replace(/[€,]/g, ''));\n    \n    for (let i = 0; i < 1000; i++) {\n      // Add random variation to NPV (±30%)\n      const variation = (Math.random() - 0.5) * 0.6;\n      const simulatedNPV = baseNPV * (1 + variation);\n      results.push(simulatedNPV);\n    }\n    \n    // Create histogram\n    createMonteCarloChart(results);\n    \n    showAlert('Monte Carlo simulation completed', 'success');\n  }, 1500);\n}\n\nfunction createMonteCarloChart(results) {\n  const canvas = document.getElementById('montecarlo-chart');\n  if (!canvas) return;\n  \n  const ctx = canvas.getContext('2d');\n  \n  // Create histogram data\n  const bins = 20;\n  const min = Math.min(...results);\n  const max = Math.max(...results);\n  const binWidth = (max - min) / bins;\n  const histogram = new Array(bins).fill(0);\n  const labels = [];\n  \n  results.forEach(value => {\n    const binIndex = Math.min(Math.floor((value - min) / binWidth), bins - 1);\n    histogram[binIndex]++;\n  });\n  \n  for (let i = 0; i < bins; i++) {\n    labels.push(`€${(min + i * binWidth).toLocaleString()}`);\n  }\n  \n  // Destroy existing chart\n  if (canvas.chart) {\n    canvas.chart.destroy();\n  }\n  \n  canvas.chart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Frequency',\n        data: histogram,\n        backgroundColor: 'rgba(37, 99, 235, 0.6)',\n        borderColor: 'rgba(37, 99, 235, 1)',\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Monte Carlo NPV Distribution'\n        }\n      }\n    }\n  });\n}\n\nfunction exportFinancialCharts() {\n  const charts = ['npv-chart', 'montecarlo-chart', 'tornado-financial'];\n  \n  charts.forEach(chartId => {\n    const canvas = document.getElementById(chartId);\n    if (canvas && typeof html2canvas !== 'undefined') {\n      html2canvas(canvas.parentElement).then(canvas => {\n        const link = document.createElement('a');\n        link.download = `${chartId}.png`;\n        link.href = canvas.toDataURL();\n        link.click();\n      });\n    }\n  });\n  \n  showAlert('Financial charts exported successfully', 'success');\n}\n\nfunction downloadFinancialCSV() {\n  const table = document.getElementById('cashflows-table');\n  const csv = tableToCSV(table);\n  \n  const blob = new Blob([csv], { type: 'text/csv' });\n  const link = document.createElement('a');\n  link.href = URL.createObjectURL(blob);\n  link.download = 'financial-data.csv';\n  link.click();\n  \n  showAlert('Financial data downloaded successfully', 'success');\n}\n\nfunction exportFullDashboard() {\n  if (typeof html2canvas === 'undefined' || typeof jsPDF === 'undefined') {\n    showAlert('Export libraries not loaded', 'error');\n    return;\n  }\n  \n  showAlert('Generating full dashboard export...', 'info');\n  \n  const { jsPDF } = window.jspdf;\n  const pdf = new jsPDF('p', 'mm', 'a4');\n  \n  // Cover page\n  pdf.setFontSize(24);\n  pdf.text('KostoPro Enhanced Report', 20, 30);\n  pdf.setFontSize(12);\n  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 50);\n  pdf.text('Professional Seafood Costing Analysis', 20, 60);\n  \n  // Add table of contents\n  pdf.addPage();\n  pdf.setFontSize(18);\n  pdf.text('Table of Contents', 20, 30);\n  pdf.setFontSize(12);\n  const toc = [\n    '1. Executive Summary',\n    '2. Cost Analysis',\n    '3. Transport Analysis',\n    '4. Scenario Comparison',\n    '5. Revenue Forecast',\n    '6. Financial Models',\n    '7. Appendices'\n  ];\n  \n  toc.forEach((item, index) => {\n    pdf.text(item, 20, 50 + (index * 10));\n  });\n  \n  // Capture main content\n  html2canvas(document.querySelector('.main-content')).then(canvas => {\n    const imgData = canvas.toDataURL('image/png');\n    const imgWidth = 170;\n    const pageHeight = 295;\n    const imgHeight = (canvas.height * imgWidth) / canvas.width;\n    let heightLeft = imgHeight;\n    \n    let position = 0;\n    \n    pdf.addPage();\n    pdf.addImage(imgData, 'PNG', 20, position, imgWidth, imgHeight);\n    heightLeft -= pageHeight;\n    \n    while (heightLeft >= 0) {\n      position = heightLeft - imgHeight;\n      pdf.addPage();\n      pdf.addImage(imgData, 'PNG', 20, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n    }\n    \n    pdf.save('kostopro-dashboard.pdf');\n    showAlert('Full dashboard exported successfully', 'success');\n  });\n}\n\n// Excel Export\nfunction exportToExcel() {\n  if (typeof XLSX === 'undefined') {\n    showAlert('Excel export library not loaded', 'error');\n    return;\n  }\n  \n  const wb = XLSX.utils.book_new();\n  \n  // Summary Sheet\n  const summaryData = [\n    ['KostoPro Enhanced Report'],\n    ['Generated:', new Date().toLocaleDateString()],\n    [''],\n    ['Summary Metrics'],\n    ['Total Cost:', document.getElementById('total-cost').textContent],\n    ['Cost Per Unit:', document.getElementById('cost-per-unit').textContent],\n    ['Transport Total:', document.querySelector('#transport-summary .cost-value').textContent]\n  ];\n  \n  const summaryWS = XLSX.utils.aoa_to_sheet(summaryData);\n  XLSX.utils.book_append_sheet(wb, summaryWS, 'Summary');\n  \n  // Data Sheet\n  const costTable = document.querySelector('#costs-section');\n  const costData = extractTableData(costTable);\n  const dataWS = XLSX.utils.aoa_to_sheet(costData);\n  XLSX.utils.book_append_sheet(wb, dataWS, 'Data');\n  \n  // Scenarios Sheet\n  if (appState.scenarios.length > 0) {\n    const scenarioData = [['Name', 'Description', 'Created']];\n    appState.scenarios.forEach(scenario => {\n      scenarioData.push([scenario.name, scenario.description, scenario.createdAt]);\n    });\n    const scenarioWS = XLSX.utils.aoa_to_sheet(scenarioData);\n    XLSX.utils.book_append_sheet(wb, scenarioWS, 'Scenarios');\n  }\n  \n  // Forecast Sheet\n  const forecastTable = document.getElementById('forecast-table');\n  if (forecastTable) {\n    const forecastData = extractTableData(forecastTable);\n    const forecastWS = XLSX.utils.aoa_to_sheet(forecastData);\n    XLSX.utils.book_append_sheet(wb, forecastWS, 'Forecast');\n  }\n  \n  XLSX.writeFile(wb, 'kostopro-report.xlsx');\n  showAlert('Excel report exported successfully', 'success');\n}\n\n// Comments System\nfunction setupComments() {\n  document.getElementById('post-comment').addEventListener('click', postComment);\n}\n\nfunction postComment() {\n  const textarea = document.getElementById('new-comment');\n  const content = textarea.value.trim();\n  \n  if (!content) {\n    showAlert('Please enter a comment', 'warning');\n    return;\n  }\n  \n  const comment = {\n    id: Date.now(),\n    content,\n    author: 'User', // In real app, get from auth\n    timestamp: new Date().toISOString()\n  };\n  \n  appState.comments.unshift(comment);\n  localStorage.setItem('comments', JSON.stringify(appState.comments));\n  \n  textarea.value = '';\n  renderComments();\n  \n  showAlert('Comment posted successfully', 'success');\n}\n\nfunction renderComments() {\n  const container = document.querySelector('.comments-list');\n  container.innerHTML = '';\n  \n  appState.comments.forEach(comment => {\n    const commentElement = document.createElement('div');\n    commentElement.className = 'comment';\n    commentElement.innerHTML = `\n      <div class=\"comment-header\">\n        <span class=\"comment-author\">${comment.author}</span>\n        <span class=\"comment-time\">${new Date(comment.timestamp).toLocaleString()}</span>\n      </div>\n      <p>${comment.content}</p>\n    `;\n    container.appendChild(commentElement);\n  });\n}\n\n// Tour System\nfunction setupTour() {\n  document.getElementById('start-tour').addEventListener('click', startTour);\n  \n  // Auto-start tour for new users\n  if (!appState.tourCompleted) {\n    setTimeout(startTour, 2000);\n  }\n}\n\nfunction startTour() {\n  if (typeof introJs === 'undefined') {\n    showAlert('Tour library not loaded', 'error');\n    return;\n  }\n  \n  const tour = introJs();\n  \n  tour.setOptions({\n    steps: [\n      {\n        intro: 'Welcome to KostoPro Enhanced! Let me show you around.'\n      },\n      {\n        element: '#costs-section',\n        intro: 'This is where you manage all your cost calculations - both direct and indirect costs.'\n      },\n      {\n        element: '#transport-section',\n        intro: 'Configure multi-leg transport routes and calculate shipping costs.'\n      },\n      {\n        element: '#adv-toggle',\n        intro: 'Access advanced features including processing and export settings.'\n      },\n      {\n        element: '#kpi-grid',\n        intro: 'Monitor your key performance indicators at a glance.'\n      },\n      {\n        element: '#scenario-section',\n        intro: 'Create and compare different business scenarios.'\n      },\n      {\n        element: '#forecast-section',\n        intro: 'Generate revenue forecasts with AI assistance.'\n      },\n      {\n        element: '#financial-models-section',\n        intro: 'Run advanced financial analysis including NPV and Monte Carlo simulations.'\n      },\n      {\n        element: '#theme-toggle',\n        intro: 'Toggle between light and dark themes for comfortable viewing.'\n      }\n    ]\n  });\n  \n  tour.oncomplete(() => {\n    appState.tourCompleted = true;\n    localStorage.setItem('tour-completed', 'true');\n    showAlert('Tour completed! You can restart it anytime.', 'success');\n  });\n  \n  tour.start();\n}\n\n// Utility Functions\nfunction showAlert(message, type = 'info') {\n  // Use the existing toast/alert system or create a simple one\n  const alertElement = document.createElement('div');\n  alertElement.className = `alert alert-${type}`;\n  alertElement.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    z-index: 1100;\n    max-width: 300px;\n    padding: 16px;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    animation: slideIn 0.3s ease-out;\n  `;\n  \n  let bgColor, textColor, icon;\n  switch (type) {\n    case 'success':\n      bgColor = 'rgba(16, 185, 129, 0.9)';\n      textColor = 'white';\n      icon = '✓';\n      break;\n    case 'warning':\n      bgColor = 'rgba(245, 158, 11, 0.9)';\n      textColor = 'white';\n      icon = '⚠';\n      break;\n    case 'error':\n      bgColor = 'rgba(239, 68, 68, 0.9)';\n      textColor = 'white';\n      icon = '✗';\n      break;\n    default:\n      bgColor = 'rgba(59, 130, 246, 0.9)';\n      textColor = 'white';\n      icon = 'ℹ';\n  }\n  \n  alertElement.style.background = bgColor;\n  alertElement.style.color = textColor;\n  alertElement.innerHTML = `<strong>${icon}</strong> ${message}`;\n  \n  document.body.appendChild(alertElement);\n  \n  setTimeout(() => {\n    alertElement.style.opacity = '0';\n    setTimeout(() => alertElement.remove(), 300);\n  }, 3000);\n}\n\nfunction tableToCSV(table) {\n  const rows = Array.from(table.querySelectorAll('tr'));\n  return rows.map(row => {\n    const cells = Array.from(row.querySelectorAll('th, td'));\n    return cells.map(cell => {\n      const text = cell.textContent.trim();\n      return text.includes(',') ? `\"${text}\"` : text;\n    }).join(',');\n  }).join('\\n');\n}\n\nfunction extractTableData(container) {\n  const table = container.querySelector('table');\n  if (!table) return [];\n  \n  const rows = Array.from(table.querySelectorAll('tr'));\n  return rows.map(row => {\n    const cells = Array.from(row.querySelectorAll('th, td'));\n    return cells.map(cell => cell.textContent.trim());\n  });\n}\n\nfunction updateCounter(element, target) {\n  if (!element) return;\n  element.dataset.target = target;\n  animateCounter(element);\n}\n\nfunction exportToPDF() {\n  if (typeof html2canvas === 'undefined' || typeof jsPDF === 'undefined') {\n    exportToExcel(); // Fallback to Excel if PDF not available\n    return;\n  }\n  \n  showAlert('Generating PDF export...', 'info');\n  \n  const { jsPDF } = window.jspdf;\n  const pdf = new jsPDF();\n  \n  html2canvas(document.querySelector('.main-content')).then(canvas => {\n    const imgData = canvas.toDataURL('image/png');\n    const imgWidth = 190;\n    const pageHeight = 295;\n    const imgHeight = (canvas.height * imgWidth) / canvas.width;\n    let heightLeft = imgHeight;\n    \n    let position = 0;\n    \n    pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);\n    heightLeft -= pageHeight;\n    \n    while (heightLeft >= 0) {\n      position = heightLeft - imgHeight;\n      pdf.addPage();\n      pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n    }\n    \n    pdf.save('kostopro-report.pdf');\n    showAlert('PDF exported successfully', 'success');\n  });\n}\n\nfunction shareCalculation() {\n  const shareData = {\n    costs: appState.costs,\n    timestamp: new Date().toISOString(),\n    url: window.location.href\n  };\n  \n  const shareText = `KostoPro Calculation Results\\n\\nTotal Cost: ${document.getElementById('total-cost').textContent}\\nCost Per Unit: ${document.getElementById('cost-per-unit').textContent}\\n\\nGenerated: ${new Date().toLocaleString()}`;\n  \n  if (navigator.share) {\n    navigator.share({\n      title: 'KostoPro Calculation',\n      text: shareText,\n      url: window.location.href\n    });\n  } else {\n    navigator.clipboard.writeText(shareText).then(() => {\n      showAlert('Calculation results copied to clipboard', 'success');\n    });\n  }\n}\n\n// PWA Support\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then(registration => {\n        console.log('SW registered: ', registration);\n      })\n      .catch(registrationError => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', loadAllLibraries);\n} else {\n  loadAllLibraries();\n}\n</script>",
            "stylesheets": []
          }
        }
      }
    ],
    "published": "published",
    "firstPublished": null,
    "testRatio": 1,
    "lastUpdated": null,
    "folders": [],
    "meta": {
      "kind": "page",
      "lastPreviewUrl": ""
    },
    "priority": null,
    "query": [],
    "name": "KostoPro Enhanced Application",
    "id": "kostopro-enhanced-app"
  }
}
